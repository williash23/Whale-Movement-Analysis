data{
  #  Generate vector of 1's for 1's trick for wrapped Cauchy distribution
  for(i in 1:npts){
    ones[i] <- 1
    }  
  }

model{  
#  Priors 

    #  Shape parameter for step length distribution
	v[1] ~ dgamma(0.01, 0.01)
	v[2] ~ dgamma(0.01, 0.01)
	
    #  Scale parameter for step length distribution
    lambda[1] ~ dgamma(0.01, 0.01)  
	lambda[2] ~ dgamma(0.01, 0.01)  
	
	#  Mean cosine of turns
    rho[1] ~ dunif(0, 1)  
	rho[2] ~ dunif(0, 1)  
	
    #  Mean direction of turns
    mu[1] ~ dunif(-3.14159265359, 3.14159265359)
	mu[2] ~ dunif(-3.14159265359, 3.14159265359)
	
	index_prob [1] <- 0.5 #0.333
	index_prob [2] <- 0.5 #0.333
	
	#for(t in 1:npts){
		#idx[t] ~ dcat(index_prob[])
		#}
	
	# Likelihood
	#  Loop over all observations
	for (t in 1:npts){

		#  Steps
		l[t] ~ dweib(v[idx[t]], lambda[idx[t]])  

		#  Turns
		# Uses the “ones” trick to sample from the Wrapped Cauchy distribution
		ones[t] ~ dbern(wC[t])
		# PDF for wrapped Cauchy distribution, divided by 500 (arbitrary) to ensure that wC[t] will be less than one
		wC[t] <- (1/(2*3.14159265359)*(1-rho[idx[t]]*rho[idx[t]])/(1+rho[idx[t]]*rho[idx[t]]-2*rho[idx[t]]*cos(theta[t]-mu[idx[t]])))/500
		theta[t] ~ dunif(-3.14159265359, 3.14159265359)

		}
	}