data{
  #  Generate vector of 1's for 1's trick for wrapped Cauchy distribution
    for(ind in 1:nind){
      for(t in 1:nocc[ind]){
        ones[ind, t] <- 1
      }  
    }
  }

model{
  #  Priors - movement state 1 = station, movement state 2 = transit
    #  Shape parameter for step length distribution
    v[1] ~ dgamma(0.01, 0.01) # Movement state 1
    v[2] ~ dgamma(0.01, 0.01) # Movement state 2

    #  Scale parameter for step length distribution
    lambda[2] <- lambda[1] + eps # Movement state 
    lambda[1] ~ dgamma(0.01, 0.01) # Movement state 
    eps ~ dnorm(0, 0.001)T(0,) # Non-negative variate to add to lambda[1]

    #  Mean cosine of turns
    rho[1] ~ dunif(0, 1) # Movement state 1
    rho[2] ~ dunif(0, 1) # Movement state 2

    #  Mean direction of turns
    mu[1] ~ dunif(-3.14159265359, 3.14159265359) # Movement state 1
    mu[2] ~ dunif(-3.14159265359, 3.14159265359) # Movement state 2


    #  Intercept for switching rate
    #for(st in 1:nstate){
      beta0[1] ~ dnorm(0, 0.001)T(-5, 5)
      beta0[2] ~ dnorm(0, 0.001)T(-5, 5)
      #}

 # Random change to the intercept for each individual
 # # tau_alpha 1 and tau_alpha 2 - one for each state
    # tau_alpha ~ dunif(0, 50)
    # for (ind in 1:nind){
      # #  Loop over states
      # for (st in 1:nstate){
        # alpha[ind, st] ~ dnorm(0, tau_alpha)T(-5, 5)
        # }
      # }
      
  #  Assign state for first observation for each indivindual
  phi[1] ~ dunif(0, 1)
  phi[2] <- 1 - phi[1]

  for(ind in 1:nind){
    idx[ind, 1] ~ dcat(phi[])
    }

  # Likelihood
    #  Generate switch parameter probability conditioned on starting state
    #  Loop over all observations
    for(ind in 1:nind){
      for (t in 1:nocc[ind]){ # nocc is the number of observations that occurs for each individual
        logit(prob1given[ind, t, 1]) <- beta0[1] #+ alpha[ind, 1] # probability of being in state 1 at time t, given was in state 1 at t-1
        logit(prob1given[ind, t, 2]) <- beta0[2] #+ alpha[ind, 2] # probability of being in state 1 at time t, given was in state 2 at t-1
        }
      }
      
    for(ind in 1:nind){
      for (t in 2:nocc[ind]){
        state[ind, t, 1] <- prob1given[ind, t-1, idx[ind, t-1]] # probability of switching to or staying in state 1
        state[ind, t, 2] <- 1-prob1given[ind, t-1, idx[ind, t-1]] # probability of switching to or staying in state 2
        idx[ind, t] ~ dcat(state[ind, t,]) # Latent state and parameter index
        }
      }


    for(ind in 1:nind){
      for(t in 2:nocc[ind]){

        #  Steps
        l[ind, t] ~ dweib(v[idx[ind, t]], lambda[idx[ind, t]]) 

        #  Turns
        # Uses the “ones” trick to sample from the Wrapped Cauchy distribution
        ones[ind, t] ~ dbern(wC[ind, t])
        # PDF for wrapped Cauchy distribution, divided by 500 (arbitrary) to ensure that wC[t] will be less than one
        wC[ind, t] <- (1/(2*3.14159265359)*(1-rho[idx[ind, t]]*rho[idx[ind, t]])/(1+rho[idx[ind, t]]*rho[idx[ind, t]]-2*rho[idx[ind, t]]*cos(theta[ind, t]-mu[idx[ind, t]])))/500
        theta[ind, t] ~ dunif(-3.14159265359, 3.14159265359)
        }
      }

    }